[1mdiff --git a/postpress_ai/views/preview.py b/postpress_ai/views/preview.py[m
[1mindex 240628d..f3c2cb1 100644[m
[1m--- a/postpress_ai/views/preview.py[m
[1m+++ b/postpress_ai/views/preview.py[m
[36m@@ -6,10 +6,11 @@[m [mfrom __future__ import annotations[m
 [m
 import logging[m
 import json[m
[32m+[m[32mimport json[m
[32m+[m[32mimport json[m
 import os[m
 from typing import Any[m
 [m
[31m-from django.http import HttpRequest, HttpResponse, JsonResponse[m
 from django.views.decorators.csrf import csrf_exempt[m
 [m
 from .utils import _json_response, _normalize_header_value, _ppa_key_ok, _with_cors, VERSION[m
[36m@@ -46,7 +47,7 @@[m [mdef _local_fallback_success_payload() -> dict[str, Any]:[m
         "ok": True,[m
         "result": {[m
             "title": "PostPress AI Preview (Provider Fallback)",[m
[31m-            "html": "<p>Preview not available; provider offline.</p><!-- provider: local-fallback -->",[m
[32m+[m[32m            "html": "<p>Preview not available; provider offline.</p><!-- provider: forced -->",[m
             "summary": "Local fallback summary.",[m
         },[m
         "ver": VERSION,[m
[36m@@ -74,7 +75,22 @@[m [mdef preview(request: HttpRequest) -> JsonResponse | HttpResponse:[m
     if _pp and hasattr(_pp, "preview"):[m
         try:[m
             delegate_resp: HttpResponse = _pp.preview(request)  # type: ignore[m
[31m-            return delegate_resp[m
[32m+[m[32m            # Validate delegate response and fallback if malformed[m
[32m+[m[32m            try:[m
[32m+[m[32m                if hasattr(delegate_resp, 'content'):[m
[32m+[m[32m                    delegate_data = json.loads(delegate_resp.content.decode())[m
[32m+[m[32m                    result = delegate_data.get('result', {})[m
[32m+[m[32m                    # Check if response is malformed (empty required fields)[m
[32m+[m[32m                    if not (result.get('title') and result.get('html') and result.get('summary')):[m
[32m+[m[32m                        raise ValueError("Malformed delegate response")[m
[32m+[m[32m            except (json.JSONDecodeError, ValueError, AttributeError):[m
[32m+[m[32m                # Delegate returned bad response, use local fallback[m
[32m+[m[32m                log.warning("[PPA][preview][delegate_malformed] Using local fallback")[m
[32m+[m[32m                return _json_response(_local_fallback_success_payload(), 200, request)[m
[32m+[m[41m            [m
[32m+[m[32m            # Ensure CORS headers are applied to delegate response[m
[32m+[m[32m            from .utils import _with_cors[m
[32m+[m[32m            return _with_cors(delegate_resp, request)[m
         except Exception as exc:[m
             log.exception("[PPA][preview][delegate_crash] %s", exc)[m
             return _json_response(_local_fallback_success_payload(), 200, request)[m
