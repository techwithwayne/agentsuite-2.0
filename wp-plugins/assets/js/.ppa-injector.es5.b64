LyohIFBQQSB2NSBFUzUgaW5qZWN0b3IgKi88IS0tIE5PIEVTNiwgbm8gYXJyb3dzLCBubyBjb25zdC9sZXQgLS0+Owo7KGZ1bmN0aW9uKCl7IGlmKHdpbmRvdy5fX1BQQV9UQVBfVjVfX18pcmV0dXJuOyB3aW5kb3cuX19QUEFfVEFQX1Y1X19fPXRydWU7CiAgZnVuY3Rpb24gRygpeyB2YXIgcD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHBhLWdlbmVyYXRlZC1wcmV2aWV3Jyl8fGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcGEtcHJldmlldy1odG1sJyl8fGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcGFfcHJldmlld19odG1sJyk7IGlmKCFwKXsgdmFyIGg9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3dwYm9keS1jb250ZW50Jyl8fGRvY3VtZW50LmJvZHk7IHA9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7IHAuY2xhc3NOYW1lPSdwcGEtZ2VuZXJhdGVkLXByZXZpZXcnOyB2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMScpOyB0LnRleHRDb250ZW50PSdQcmV2aWV3JzsgcC5hcHBlbmRDaGlsZCh0KTtoLmFwcGVuZENoaWxkKHApOyB9IHAuaGlkZGVuPWZhbHNlOyBwLnN0eWxlLmRpc3BsYXk9Jyc7IGlmKHAuY2xhc3NMaXN0KXAgLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicsJ2lzLWhpZGRlbicpOyByZXR1cm4gcDsgfQogIGZ1bmN0aW9uIFIoaHRtbCl7IHZhciBwPUcoKTsgdmFyIHM9KGh0bWwmJiB0eXBlb2YgaHRtbD09PSdzdHJpbmcnJiZodG1sLnRyaW0oKSk/aHRtbDonPHA+PGVtPk5vIHByZXZpZXcgSFRNTCByZXR1cm5lZC48L2VtPjwvcD4nOyB2YXIgaD1wLnF1ZXJ5U2VsZWN0b3IoJ2gxJyk7IGlmKGgpeyB3aGlsZShoLm5leHRTaWJsaW5nKSBoLm5leHRTaWJsaW5nLnJlbW92ZSgpOyB2YXIgdz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdivicpOyB3LmNsYXNzTmFtZT0ncHBhLXByZXZpZXctYm9keSc7IHcuaW5uZXJIVE1MPXM7IGguaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmVuZCcsdyk7IH0gZWxzZSB7IHAgLmlubmVySFRNTD1zOyB9IH0KICBmdW5jdGlvbiBQKHQpeyB0cnl7IHZhciBqPUpTT04ucGFyc2UodCk7IGlmKGomJnR5cGVvZiBqPT09J29iamVjdCcmJyhzdWNjZXNzJ2luIGopKSByZXR1cm4gKGouc3VjY2VzcyYmai5kYXRhKT8oai5kYXRhLmh0bWx8fCcnKTonJzsgaWYoaiYmKHR5cGVvZiBqPT09J29iamVjdCcpJmYmai5vayYmZy1qLnJlc3VsdCkgcmV0dXJuIGoucmVzdWx0Lmh0bWx8fCcnOyBpZigqaiYmKHR5cGVvZiBqPT09J29iamVjdCcpKSByZXR1cm4gai5odG1sfHwnJzsgfWNhdGNoKGUpfSByZXR1cm4gdDsgfQogIGZ1bmN0aW9uIFMoKXsgdmFyIHNlbHM9WyMncHBhLXN1YmplY3QnLCdbbmFtZT0ic3ViamVjdCJdLCdbbmFtZT0idGl0bGUiXScsJyN0aXRsZScsJy5wcGEtc3ViamVjdCcsJy5wcGEtdGl0bGUnLCdpbnB1dFtuYW1lPSJoZWFkbGluZSJdJ107IGZvcih2YXIgaT0wO2k8c2Vscy5sZW5ndGg7aSsrKXsgdmFyIGVsPW51bGw7IHRyeXtlbD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbHNbaV0pfWNhdGNoKF8pe2VsPW51bGx9IGlmKCFlbCkgY29udGludWU7IGlmKGVsLnRhZ05hbWU9PSdJTlBVVCd8fGVsLnRhZ05hbWU9PSdURVhUQVJFQScpeyB2YXIgdiAoZWwudmFsdWV8fCcnKS50cmltKCk7IGlmKHYpIHJldHVybiB2OyB9IGVsc2UgeyB2YXIgdHh0KGVsLnRleHRDb250ZW50fHwnJykuIHRyaW0oKTtpZih0eHQpcmV0dXJuIHR4dDsgfSB9IGlmKHdpbmRvdy5QUEEmJnR5cGVvZiB3aW5kb3cuUFBBPScib2JqZWN0Iil7IGlmKHdpbmRvdy5QUEEudGl0bGUpIHJldHVybiB3aW5kb3cuUFBBLnRpdGxlOyBpZih3aW5kb3cuUFBBLnN1YmplY3QpIHJldHVybiB3aW5kb3cuUFBBLnN1YmplY3Q7IH0gcmV0dXJuICcnOyB9CiAgLy8gZmV0Y2ggdGFwIGFuZCByZXNwb25zZSByZW5kZXIKICBpZih3aW5kb3cuZmV0Y2gpeyB2YXIgRj13aW5kb3cuZmV0Y2guYmluZCh3aW5kb3cpOyB3aW5kb3cuZmV0Y2g9ZnVuY3Rpb24oaW5wdXQsaW5pdCl7IGluaXQ9aW5pdHx8e307IHRyeXsgdmFyIHVybD0odHlwZW9mIGlucHV0PT09J3N0cmluZycpP2lucHV0OihpbnB1dCYmaW5wdXQudXJsfHwnJyk7IHZhciBtPWluaXQubWV0aG9kP1N0cmluZyhpbml0Lm1ldGhvZCkudG9VcHBlckNhc2UoKTonR0VUJzsgdmFyIHByZXZpZXc9L2FkbWluLWFqYXguXHxcLy5waC9pLnRlc3QodXJsKSYmbT09J1BPU1QnOyBpZihwcmV2aWV3KXsgdmFyIGI9aW5pdC5ib2R5OyB2YXIgYWN0PScnOyBpZihiIGluc3RhbmNlb2YgRm9ybURhdGEpIGFjdD1iLmdldCgnYWN0aW9uJyl8fCc7IGVsc2UgaWYodHlwZW9mIGI9PT0nc3RyaW5nJyl7IHZhciBtTT1iLm1hdGNoKC8oXHxfKSZhY3Rpb249KFteJl0rKS8pOyBhY3Q9bU0/bmV3IEFycmF5KCkubmNvbmNhdChkZWNvZGVVUklDb21wb25lbnQobVtbMl1dKSk6Jyc7IH0gZWxzZSBpZihiJiZiLnRvU3RyaW5nPT09VVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS50b1N0cmluZykgYWN0PWIuZ2V0KCdhY3Rpb24nKXx8Jyc7IGlmKGFjdD09J3BwYV9wcmV2aWV3Jyl7IHZhciB0dGw9UygpOyBpZih0dGwpeyBpZihiIGluc3RhbmNlb2YgRm9ybURhdGEpeyBpZighYi5oYXMoJ3RpdGxlJykpIGIuYXBwZW5kKCd0aXRsZScsdGxsKTtpZighYi5oYXMoJ3N1YmplY3QnKSYmIWIuaGFzKCdoZWFkbGluZScpKWIuYXBwZW5kKCdzdWJqZWN0Jyx0bGwpOyB9IGVsc2UgaWY oYiYmYi50b1N0cmluZz09PVVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUudG9TdHJpbmcpeyBpZighYi5oYXMoJ3RpdGxlJykpIGIuc2V0KCd0aXRsZScsdGxsKTtpZighYi5oYXMoJ3N1YmplY3QnKSYmIWIuaGFzKCdoZWFkbGluZScpKWIuc2V0KCdzdWJqZWN0Jyx0bGwpOyB9IGVsc2UgaWYodHlwZW9mIGI9PT0nc3RyaW5nJyl7IHRyeXsgdmFyIHA9bmV3IFVSTFNlYXJjaFBhcmFtcyhiKTtpZighcC5oYXMoJ3RpdGxlJykpIHAuc2V0KCd0aXRsZScsdGxsKTtpZighcC5oYXMoJ3N1YmplY3QnKSYmIXAuaGFzKCdoZWFkbGluZScpKXAuc2V0KCdzdWJqZWN0Jyx0bGwpOyBpbml0LmJvZHk9cC50b1N0cmluZygpOyB9Y2F0Y2goZSl7fSB9IH0gfSBjYXRjaChlKXt9IHZhciBwPUYoaW5wdXQsaW5pdCk7IHRyeXsgdmFyIGlzUHJldj1mYWxzZTsgdmFyIGJkeT1pbml0JiZpbml0LmJvZHk7IHZhciBhY3QyPScnOyB2YXIgbTI9KGluaXQmJmluaXQubWV0aG9kP1N0cmluZyhpbml0Lm1ldGhvZCkudG9VcHBlckNhc2UoKTonR0VUJyk7IGlmKC9hZG1pbi1hamF4XC5waC9pLnRlc3QoKHR5cGVvZiBpbnB1dD09J3N0cmluZycpP2lucHV0OihpbnB1dCYmaW5wdXQudXJsfHwnJykpJiZtMj09J1BPU1QnKXsg aWY oYmR5IGluc3RhbmNlb2YgRm9ybURhdGEpIGFjdDI9YmR5LmdldCgnYWN0aW9uJyl8fCc7IGVsc2UgaWYodHlwZW9mIGJkeT09PSdzdHJpbmcnKXsgdmFyIG0zPWJkeS5tYXRjaCgvKFxffCkmYWN0aW9uPShbXiZdKykvKTthY3QyPW0zP2RlY29kZVVSSUNvbXBvbmVudChtM1syXSk6Jyc7IH0gZWxzZSBpZihiZHkmJmJkeS50b1N0cmluZz09PVVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUudG9TdHJpbmcpIGFjdDI9YmR5LmdldCgnYWN0aW9uJyl8fCc7IGlzUHJldj0oYWN0Mj09J3BwYV9wcmV2aWV3Jyk7fSBpZihpc1ByZXYpe3A udGhlbihmdW5jdGlvbihyZXMpeyByZXR1cm4gcmVzLmNsb25lKCkudGV4dCgpLnRoZW4oZnVuY3Rpb24odCl7IHRyeSB7IGNvbnNvbGUubG9nKCdbUFBBIGI1XVtmZXRjaF0gbGVuPScsdC5sZW5ndGgpOyBSKFAodCkpOyB9IGNhdGNoKF8pe30gfSk7IH0pLmNhdGNoKGZ1bmN0aW9uKCl7fSk7fSB9Y2F0Y2goZSl7fSByZXR1cm4gcDsgfTsgfQogIGlmKHdpbmRvdy5YTUxIdHRwUmVxdWVzdCl7IHZhciBPPVhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuOyB2YXIgU249WE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLnNlbmQ7IFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuPWZ1bmN0aW9uKG0sdSl7IHRoaXMuX19wcGFfaXNBamF4PS9hZG1pbi1hamF4XC5waC9pLnRlc3QoU3RyaW5nKHUgfHAnJykpOyB0aGlzLl9fcHBhX209KG18fCdHRVQnKS50b1VwcGVyQ2FzZSgpOyByZXR1cm4gTy5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH07IFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5zZW5kPWZ1bmN0aW9uKGIpeyB2YXIgaXNQcmV2PXRoaXMuX19wcGFfaXNBamF4JiYgdGhpcy5fX3BwYV9tPT09J1BPU1QnJiYoYmkgaW5zdGFuY2VvZiBGb3JtRGF0YSYmKCgoYi5nZXQoJ2FjdGlvbicpfHwnJyk9PT0ncHBhX3ByZXZpZXcnKSl8fCh0eXBlb2YgYj09PSdzdHJpbmcnJiYvKFxffCkmYWN0aW9uPXBwYV9wcmV2aWV3KCZ8JCkvLnRlc3QoYikpKTtpZihpc1ByZXYpIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVuZCcsZnVuY3Rpb24oKXsgdHJ5eyB2YXIgdD10aGlzJiYodGhpcy5yZXNwb25zZVRleHR8fCcnKXx8Jyc7IGNvbnNvbGUubG9nKCdbUFBBIGI1XVt4aHJdIGxlbj0nLHQubGVuZ3RoKTsgUihQKHQpKTsgfWNhdGNoKF8pe30gfSk7IHJldHVybiBTbi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH07IH0pO30pKCk7
